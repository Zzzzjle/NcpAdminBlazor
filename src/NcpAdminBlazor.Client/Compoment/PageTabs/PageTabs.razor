@using NcpAdminBlazor.Client.Providers
@using NcpAdminBlazor.Client.Models
@implements IDisposable
@inject NavigationManager NavigationManager
@inject MenuProvider MenuProvider

<div class="closable-button-container pl-2">
    <MudStack Row Spacing="1">
        @foreach (var chip in _chips)
        {
            <MudButton
                Variant="Variant.Text"
                Color="@(_activeChipId == chip.Id ? Color.Primary : Color.Default)"
                OnClick="@(() => OnChipClicked(chip))"
                Ripple="false">
                @chip.Title
                @if (chip.IsCloseable)
                {
                    <MudIconButton
                        OnClick="@(() => OnChipClosed(chip))"
                        Icon="@Icons.Material.Filled.Close"
                        Class="extra-small-icon-button"/>
                }
            </MudButton>
        }
    </MudStack>
</div>

@code {

    /// <summary>
    /// 定义一个公共事件，当标签页关闭时触发。
    /// 其他持有本组件引用的组件可以订阅此事件。
    /// </summary>
    public event Action<string>? OnTabClosed;


    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        HandleLocationChange(NavigationManager.Uri);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        HandleLocationChange(e.Location);
        InvokeAsync(StateHasChanged);
    }

    private string GetCurrentRoute(string location)
    {
        var r = $"/{NavigationManager.ToBaseRelativePath(location)}";
        return string.IsNullOrEmpty(r) || r == "/app/" ? "/" : r;
    }

    private void HandleLocationChange(string newLocation)
    {
        var currentRoute = GetCurrentRoute(newLocation);
        _activeChipId = currentRoute;

        if (!_chips.Any(c => c.Id == currentRoute))
        {
            var menuItem = FindMenuItemByHref(MenuProvider.MenuItems, currentRoute);
            var title = menuItem?.Title ?? GenerateFallbackTitle(currentRoute);
            _chips.Add(new HistoryChipItem { Id = currentRoute, Title = title, IsCloseable = currentRoute != "/" });
        }
    }

    private void OnChipClicked(HistoryChipItem chip)
    {
        if (_activeChipId != chip.Id)
        {
            NavigationManager.NavigateTo(chip.Id);
        }
    }

    private void OnChipClosed(MouseEventArgs e, HistoryChipItem chip)
    {
        var index = _chips.IndexOf(chip);
        _chips.Remove(chip);

        // 触发公共事件，通知任何正在监听的组件
        OnTabClosed?.Invoke(chip.Id);

        if (_activeChipId == chip.Id && _chips.Any())
        {
            var newIndex = Math.Max(0, index - 1);
            NavigationManager.NavigateTo(_chips[newIndex].Id);
        }
    }

    // 使用 static 字段来在导航之间持久化标签列表
    private static readonly List<HistoryChipItem> _chips = [];

    // 当前激活的标签ID，非静态，随组件实例更新
    private string? _activeChipId;

    private void UpdateTabsForCurrentLocation()
    {
        var currentRoute = $"/{NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}";
        if (string.IsNullOrEmpty(currentRoute) || currentRoute == "/")
        {
            currentRoute = "/"; // 规范化首页路由
        }

        // 1. 设置当前激活的标签ID
        _activeChipId = currentRoute;

        // 2. 如果标签已存在，则无需任何操作
        if (_chips.Any(c => c.Id == currentRoute))
        {
            return;
        }

        // 3. 如果是新标签，则创建并添加
        // 参考 BreadcrumbStore 的逻辑，从 MenuProvider 获取标题
        var menuItem = FindMenuItemByHref(MenuProvider.MenuItems, currentRoute);
        var title = menuItem?.Title ?? GenerateFallbackTitle(currentRoute);

        var newChip = new HistoryChipItem
        {
            Id = currentRoute,
            Title = title,
            IsCloseable = currentRoute != "/" // 首页不可关闭
        };

        _chips.Add(newChip);
    }

    private void OnChipClosed(HistoryChipItem chip)
    {
        // 从静态列表中移除
        _chips.Remove(chip);

        // 如果关闭的是当前激活的标签，则导航到相邻的标签
        if (_activeChipId == chip.Id && _chips.Any())
        {
            // 导航到最后一个标签页，体验更自然
            NavigationManager.NavigateTo(_chips.Last().Id);
        }
    }

    // 从 MenuProvider 查找菜单项的核心逻辑
    private static MenuItem? FindMenuItemByHref(IEnumerable<MenuItem> items, string href)
    {
        MenuItem? bestMatch = null;
        foreach (var item in items)
        {
            if (item.Href != null && href.StartsWith(item.Href, StringComparison.OrdinalIgnoreCase) &&
                (bestMatch == null || item.Href.Length > bestMatch.Href!.Length))
            {
                bestMatch = item;
            }

            if (item.ChildItems is null || item.ChildItems.Count == 0) continue;
            var childMatch = FindMenuItemByHref(item.ChildItems, href);
            if (childMatch != null && (bestMatch == null || childMatch.Href!.Length > bestMatch.Href!.Length))
            {
                bestMatch = childMatch;
            }
        }

        return bestMatch;
    }

    // 当无法从菜单中找到标题时的备用方法
    private static string GenerateFallbackTitle(string route)
    {
        if (route == "/") return "首页";
        var lastSegment = route.Split('/').LastOrDefault(s => !string.IsNullOrEmpty(s));
        // 将 "PageName" 转换为 "Page Name"
        return System.Text.RegularExpressions.Regex.Replace(lastSegment ?? "Page", "([A-Z])", " $1").Trim();
    }

    // 必须实现 IDisposable 来取消订阅，防止内存泄漏
    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    // 数据模型 (建议将其移至一个共享的 Models 文件夹)
    private class HistoryChipItem
    {
        public required string Id { get; set; }
        public required string Title { get; set; }
        public bool IsCloseable { get; set; } = true;
    }

}