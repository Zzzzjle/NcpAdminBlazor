@implements IDisposable

@foreach (var route in OpenedRoutes)
{
    <div style="@(_activeRoute == route ? "display: block;" : "display: none;")" @key="route">
        <ConditionalRender Value="_activeRoute == route">
            @ChildContent
        </ConditionalRender>
    </div>
}
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; } = null!;

    /// <summary>
    /// 接收从父组件(MainLayout)传递过来的TabsBar实例。
    /// </summary>
    [Parameter]
    public PageTabs? ParentTabsBar { get; set; }

    private static readonly List<string> OpenedRoutes = [];
    private string? _activeRoute;
    private bool _isSubscribed;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        _activeRoute = GetCurrentRoute();
        if (!OpenedRoutes.Contains(_activeRoute))
        {
            OpenedRoutes.Add(_activeRoute);
        }
    }

    protected override void OnParametersSet()
    {
        // OnParametersSet 会在组件接收参数后运行
        // 这是订阅从Parameter传入的组件事件的最佳位置
        if (ParentTabsBar != null && !_isSubscribed)
        {
            ParentTabsBar.OnTabClosed += OnTabClosedByEvent;
            _isSubscribed = true;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _activeRoute = GetCurrentRoute(e.Location);
        if (!OpenedRoutes.Contains(_activeRoute))
        {
            OpenedRoutes.Add(_activeRoute);
        }

        InvokeAsync(StateHasChanged);
    }

    private void OnTabClosedByEvent(string closedRoute)
    {
        if (OpenedRoutes.Contains(closedRoute))
        {
            OpenedRoutes.Remove(closedRoute);
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        // 组件销毁时，确保取消订阅，防止内存泄漏
        if (ParentTabsBar != null && _isSubscribed)
        {
            ParentTabsBar.OnTabClosed -= OnTabClosedByEvent;
        }
    }

    // ... (GetCurrentRoute 辅助方法不变)
    private string GetCurrentRoute(string? location = null)
    {
        var u = location is null ? NavigationManager.Uri : location;
        var r = $"/{NavigationManager.ToBaseRelativePath(u)}";
        return string.IsNullOrEmpty(r) || r == "/app/" ? "/" : r;
    }

}