@page "/system/users"
@attribute [Authorize]
@using NcpAdminBlazor.Client.Component
@using NcpAdminBlazor.Client.Pages.Applications.User.Models

<PageTitle>用户管理</PageTitle>
<div style="display: flex; flex-direction: column; height: 100%; gap: 0.75rem; overflow: hidden;">
    <ShouldDisplay Value="_searchOpen">
        <QueryForm OnSearch="@OnSearchAsync"
                   OnReset="@OnResetAsync"
                   Context="itemAttrs">
            <QueryFormItem>
                <MudTextField @bind-Value="_filter.Username"
                              Label="用户名"
                              Clearable="true"
                              @attributes="itemAttrs"/>
            </QueryFormItem>
            <QueryFormItem>
                <MudTextField @bind-Value="_filter.Email"
                              Label="邮箱"
                              Clearable="true"
                              @attributes="itemAttrs"/>
            </QueryFormItem>
            <QueryFormItem>
                <MudTextField @bind-Value="_filter.Phone"
                              Label="手机号"
                              Clearable="true"
                              @attributes="itemAttrs"/>
            </QueryFormItem>
            <QueryFormItem>
                <MudTextField @bind-Value="_filter.RealName"
                              Label="真实名称"
                              Clearable="true"
                              @attributes="itemAttrs"/>
            </QueryFormItem>
        </QueryForm>
    </ShouldDisplay>

    <AppDataGrid @ref="_dataGrid"
                 T="NcpAdminBlazorWebApplicationQueriesUserListItemDto"
                 Title="用户列表"
                 AddButtonText="新增用户"
                 ServerData="ServerReload"
                 @bind-SearchOpen="_searchOpen">
        <PropertyColumn Property="x => x.Username"/>
        <PropertyColumn Property="x => x.Email"/>
        <PropertyColumn Property="x => x.Phone"/>
        <PropertyColumn Property="x => x.RealName"/>
        <TemplateColumn>
            <CellTemplate>
                @foreach (var role in context.Item?.RoleNames ?? [])
                {
                    <MudChip T="string" Color="Color.Info" Size="Size.Small" Class="ma-1">@role</MudChip>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.CreatedAt"/>
    </AppDataGrid>
</div>

@code {

    [Inject] ApiClient ApiClient { get; set; } = null!;
    AppDataGrid<NcpAdminBlazorWebApplicationQueriesUserListItemDto> _dataGrid = null!;
    readonly UserSearchFilter _filter = new();

    bool _searchOpen;

    private async Task<GridData<NcpAdminBlazorWebApplicationQueriesUserListItemDto>> ServerReload(GridState<NcpAdminBlazorWebApplicationQueriesUserListItemDto> state)
    {
        try
        {
            var result = await ApiClient.Api.User.List.GetAsync(configure =>
            {
                configure.QueryParameters.Username = _filter.Username;
                configure.QueryParameters.Email = _filter.Email;
                configure.QueryParameters.Phone = _filter.Phone;
                configure.QueryParameters.RealName = _filter.RealName;
                configure.QueryParameters.PageIndex = state.Page + 1;
                configure.QueryParameters.PageSize = state.PageSize;
                configure.QueryParameters.CountTotal = true;
            });
            if (result is { Success: true, Data: not null })
            {
                return new GridData<NcpAdminBlazorWebApplicationQueriesUserListItemDto>
                {
                    Items = result.Data.Items ?? [],
                    TotalItems = result.Data.Total ?? 0,
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        return new GridData<NcpAdminBlazorWebApplicationQueriesUserListItemDto> { Items = [], TotalItems = 0 };
    }

    private Task OnResetAsync()
    {
        _filter.Username = null;
        _filter.Email = null;
        _filter.Phone = null;
        _filter.RealName = null;
        return Task.CompletedTask;
    }

    private Task OnSearchAsync()
    {
        return _dataGrid.ReloadServerData();
    }

}