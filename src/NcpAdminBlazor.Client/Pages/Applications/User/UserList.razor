@page "/applications/users"
@page "/users"
@using NcpAdminBlazor.Client.Models

<PageTitle>用户管理</PageTitle>
<div style="display: flex; flex-direction: column; height: 100%; gap: 0.8rem; overflow: hidden;">
    <MudPaper Class="pa-4" Elevation="1" Style="flex: 0 0 auto;">
        <MudForm Model="_filter">
            <MudGrid Justify="Justify.SpaceBetween">
                <MudItem xs="12" sm="6" md="3">
                    <MudTextField @bind-Value="_filter.Username"
                                  Margin="Margin.Dense"
                                  Label="用户名"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Clearable="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudTextField @bind-Value="_filter.Email"
                                  Margin="Margin.Dense"
                                  Label="邮箱"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Clearable="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudTextField @bind-Value="_filter.Phone"
                                  Margin="Margin.Dense"
                                  Label="手机号"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Clearable="true"/>
                </MudItem>
                @if (_showMore)
                {
                    <MudItem xs="12" sm="6" md="3">
                        <MudTextField @bind-Value="_filter.RealName"
                                      Margin="Margin.Dense"
                                      Label="真实名称"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      Clearable="true"/>
                    </MudItem>
                }
                <MudSpacer/>
                <MudItem xs="12" sm="6" md="3" Class="d-flex align-items-center">
                    <MudStack Row="true" Style="width: 100%" Spacing="5" AlignItems="AlignItems.Center"
                              Justify="Justify.FlexEnd">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Disabled="_loading"
                                   OnClick="@OnSearchAsync">
                            @if (_loading)
                            {
                                <MudProgressCircular Indeterminate="true" Class="me-1" Size="Size.Small"/>
                            }
                            查询
                        </MudButton>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Secondary"
                                   Disabled="_loading"
                                   OnClick="@Reset">
                            重置
                        </MudButton>
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Info"
                                   StartIcon="@(_showMore ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)"
                                   OnClick="@(() => _showMore = !_showMore)">
                            @(_showMore ? "收起" : "更多")
                        </MudButton>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudPaper>

    <MudPaper Class="pa-0" Style="flex: 1 1 auto;overflow: hidden">
        <MudDataGrid @ref="_dataGrid" T="NcpAdminBlazorWebApplicationQueriesUserListItemDto"
                     ServerData="ServerReload"
                     Dense="true"
                     FixedFooter="true"
                     FixedHeader="true"
                     Height="100%">
            <ToolBarContent>
                <MudText Typo="Typo.body1">用户列表</MudText>
                <MudSpacer/>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="NcpAdminBlazorWebApplicationQueriesUserListItemDto"/>
                <PropertyColumn Property="x => x.Username"/>
                <PropertyColumn Property="x => x.Email"/>
                <PropertyColumn Property="x => x.Phone"/>
                <PropertyColumn Property="x => x.RealName"/>
                <PropertyColumn Property="x => x.RoleNames"/>
                <PropertyColumn Property="x => x.CreatedAt"/>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="NcpAdminBlazorWebApplicationQueriesUserListItemDto"/>
            </PagerContent>
        </MudDataGrid>
    </MudPaper>
</div>

@code {

    [Inject] ApiClient ApiClient { get; set; } = null!;
    MudDataGrid<NcpAdminBlazorWebApplicationQueriesUserListItemDto> _dataGrid = null!;
    readonly FilterModel _filter = new();
    bool _showMore;
    bool _loading;

    private async Task<GridData<NcpAdminBlazorWebApplicationQueriesUserListItemDto>> ServerReload(GridState<NcpAdminBlazorWebApplicationQueriesUserListItemDto> state)
    {
        _loading = true;
        try
        {
            var result = await ApiClient.Api.User.List.GetAsync(configure =>
            {
                configure.QueryParameters.Username = _filter.Username;
                configure.QueryParameters.Email = _filter.Email;
                configure.QueryParameters.Phone = _filter.Phone;
                configure.QueryParameters.RealName = _filter.RealName;
                configure.QueryParameters.PageIndex = state.Page;
                configure.QueryParameters.PageSize = state.PageSize;
            });
            if (result is { Success: true, Data: not null })
            {
                state.Page = result.Data.PageIndex ?? state.Page;
                state.PageSize = result.Data.PageSize ?? state.PageSize;
                return new GridData<NcpAdminBlazorWebApplicationQueriesUserListItemDto>
                {
                    Items = result.Data.Items ?? [], TotalItems = result.Data.Total ?? 0,
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            _loading = false;
        }

        return new GridData<NcpAdminBlazorWebApplicationQueriesUserListItemDto> { Items = [], TotalItems = 0 };
    }

    private void Reset()
    {
        _filter.Username = null;
        _filter.Email = null;
        _filter.Phone = null;
        _filter.RealName = null;
    }

    private Task OnSearchAsync()
    {
        return _dataGrid.ReloadServerData();
    }

    class FilterModel
    {
        public string? Username { get; set; }
        public string? Email { get; set; }
        public string? Phone { get; set; }
        public string? RealName { get; set; }
    }

}