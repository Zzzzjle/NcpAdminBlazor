@page "/system/users"
@attribute [Authorize]
@using NcpAdminBlazor.Client.Component
@using NcpAdminBlazor.Client.HttpClient
@using UserListItemDto = NcpAdminBlazor.Client.Models.NcpAdminBlazorWebApplicationQueriesUserListItemDto
@using NcpAdminBlazor.Client.Pages.Applications.User.Models
@using NcpAdminBlazor.Client.Pages.Applications.User.Components

<PageTitle>用户管理</PageTitle>
<MudStack Spacing="3" Class="h-full">
    <ShouldDisplay Value="_searchOpen">
        <QueryForm OnSearch="@OnSearchAsync"
                   OnReset="@OnResetAsync"
                   Context="itemAttrs">
            <QueryFormItem Label="用户名">
                <MudTextField @bind-Value="_filter.Username"
                              Clearable="true"
                              Placeholder="请输入用户名"
                              @attributes="itemAttrs"/>
            </QueryFormItem>
            <QueryFormItem Label="邮箱">
                <MudTextField @bind-Value="_filter.Email"
                              Clearable="true"
                              Placeholder="请输入邮箱"
                              @attributes="itemAttrs"/>
            </QueryFormItem>
            <QueryFormItem Label="手机号">
                <MudTextField @bind-Value="_filter.Phone"
                              Clearable="true"
                              Placeholder="请输入手机号"
                              @attributes="itemAttrs"/>
            </QueryFormItem>
            <QueryFormItem Label="真实名称">
                <MudTextField @bind-Value="_filter.RealName"
                              Clearable="true"
                              Placeholder="请输入真实名称"
                              @attributes="itemAttrs"/>
            </QueryFormItem>
        </QueryForm>
    </ShouldDisplay>

    <AppDataGrid @ref="_dataGrid"
                 T="UserListItemDto"
                 Title="用户列表"
                 AddButtonText="新增用户"
                 ServerData="ServerReload"
                 ActionColumnTitle="操作"
                 OnAdd="@OpenCreateDrawerAsync"
                 OnEdit="@OpenEditDrawerAsync"
                 @bind-SearchOpen="_searchOpen">
        <PropertyColumn Property="x => x.Username"/>
        <PropertyColumn Property="x => x.Email"/>
        <PropertyColumn Property="x => x.Phone"/>
        <PropertyColumn Property="x => x.RealName"/>
        <TemplateColumn>
            <CellTemplate>
                @foreach (var role in context.Item?.RoleNames ?? [])
                {
                    <MudChip T="string" Color="Color.Info" Size="Size.Small" Class="ma-1">@role</MudChip>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.CreatedAt"/>
    </AppDataGrid>
    <UserEditDrawer @bind-Open="_editDrawerOpen"
                    EditingItem="_editingItem"
                    OnSaved="HandleEditSavedAsync"/>
    <UserAddDrawer @bind-Open="_addDrawerOpen"
                   OnSaved="HandleAddSavedAsync"/>
</MudStack>

@code {

    [Inject] ApiWrapper ApiWrapper { get; set; } = null!;
    AppDataGrid<UserListItemDto> _dataGrid = null!;
    readonly UserSearchFilter _filter = new();

    bool _searchOpen = true;
    bool _editDrawerOpen;
    bool _addDrawerOpen;
    UserListItemDto? _editingItem;

    private async Task<GridData<UserListItemDto>> ServerReload(GridState<UserListItemDto> state)
    {
        GridData<UserListItemDto> data = new();
        await ApiWrapper.HandleCallAsync(apiClient => apiClient.Api.User.List.GetAsync(configure =>
            {
                configure.QueryParameters.Username = _filter.Username;
                configure.QueryParameters.Email = _filter.Email;
                configure.QueryParameters.Phone = _filter.Phone;
                configure.QueryParameters.RealName = _filter.RealName;
                configure.QueryParameters.PageIndex = state.Page + 1;
                configure.QueryParameters.PageSize = state.PageSize;
                configure.QueryParameters.CountTotal = true;
            }), result =>
            {
                if (result is not { Data: not null }) return;
                data.Items = result.Data.Items ?? [];
                data.TotalItems = result.Data.Total ?? 0;
            }
        );
        return data;
    }

    private Task OnResetAsync()
    {
        _filter.Username = null;
        _filter.Email = null;
        _filter.Phone = null;
        _filter.RealName = null;
        return Task.CompletedTask;
    }

    private Task OnSearchAsync()
    {
        return _dataGrid.ReloadServerData();
    }

    private Task OpenCreateDrawerAsync()
    {
        _addDrawerOpen = true;
        return Task.CompletedTask;
    }

    private Task OpenEditDrawerAsync(UserListItemDto item)
    {
        _editingItem = item;
        _editDrawerOpen = true;
        return Task.CompletedTask;
    }

    private Task HandleEditSavedAsync(string? _)
    {
        return _dataGrid.ReloadServerData();
    }

    private Task HandleAddSavedAsync()
    {
        return _dataGrid.ReloadServerData();
    }

}