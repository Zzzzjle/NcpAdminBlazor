@page "/account/login"
@layout LoginLayout
@using NcpAdminBlazor.Client.HttpClient
@using NcpAdminBlazor.Client.HttpClient.Auth
@using NcpAdminBlazor.Client.Models
@using NcpAdminBlazor.Client.Providers
@using NcpAdminBlazor.Client.Services

<MudForm @bind-IsValid="@_success" @bind-Errors="@_errors">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="mt-4">Sign In</MudText>
    <MudText>Don't have an account?
        <MudLink Href="@Register.PageUri">Sign Up</MudLink>
    </MudText>

    <MudTextField T="string" @bind-Value="@_model.LoginName" Required="true" Label="Username"
                  Variant="Variant.Outlined" Class="my-6"></MudTextField>

    <MudTextField @bind-Value="@_model.Password" Label="Password" Required="true" Variant="Variant.Outlined"
                  InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                  OnAdornmentClick="TogglePasswordVisibility"/>

    <div Class="d-flex justify-space-between align-center">
        <MudCheckBox T="bool" Label="remember me" @bind-Value="_rememberMe" Color="Color.Primary"
                     Class="ml-n1 my-3"></MudCheckBox>
        <MudSpacer/>
        <br/>
        <br/>
        <MudLink Href="/pages/authentication/forgot-password">forget password?</MudLink>
    </div>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success || _isBusy)" Size="Size.Large"
               FullWidth="true" OnClick="@HandleSubmit">
        @if (_isBusy)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
            <MudText Class="ms-2">登录中...</MudText>
        }
        else
        {
            <MudText>登录</MudText>
        }
    </MudButton>

    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="_isBusy" Size="Size.Large" FullWidth="true"
               OnClick="@HandleGuest" Class="mt-4">游客登录
    </MudButton>

</MudForm>


@code {
    [Inject] ApiWrapper ApiWrapper { get; set; } = null!;
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    [Inject] TokenAuthenticationStateProvider AuthStateProvider { get; set; } = null!;
    [Inject] ISnackbar Snackbar { get; set; } = null!;
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    private bool _isBusy;
    private readonly InputModel _model = new();
    private bool _rememberMe;
    private bool _success;
    private string[] _errors = [];

    bool _passwordVisibility;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task HandleSubmit()
    {
        if (_isBusy) return;

        _isBusy = true;
        StateHasChanged();

        try
        {
            NcpAdminBlazorWebAspNetCoreMyTokenResponse? tokenData = null;
            var loginSucceeded = await ApiWrapper.HandleCallAsync(
                apiClient => apiClient.Api.User.Login.PostAsync(
                    new NcpAdminBlazorWebEndpointsUsersLoginRequest
                    {
                        Username = _model.LoginName,
                        Password = _model.Password
                    },
                    requestConfiguration => requestConfiguration.Options.Add(new AllowAnonymousRequestOption())),
                response => tokenData = response.Data);

            if (loginSucceeded && tokenData is
                {
                    AccessToken: { } accessToken,
                    RefreshToken: { } refreshToken
                })
            {
                await AuthStateProvider.LoginAsync(new TokenStorageSnapshot(
                    accessToken,
                    refreshToken,
                    tokenData.AccessTokenExpiry,
                    tokenData.RefreshTokenExpiry,
                    tokenData.UserId ?? string.Empty));

                NavigationManager.NavigateTo(ReturnUrl ?? "/");
            }
        }
        finally
        {
            _isBusy = false;
            StateHasChanged();
        }
    }

    private Task HandleGuest()
    {
        if (_isBusy) return Task.CompletedTask;
        _isBusy = true;
        Snackbar.Add("Guest login is not implemented yet.", Severity.Info);
        StateHasChanged();
        _isBusy = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    class InputModel
    {
        public string LoginName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

}
