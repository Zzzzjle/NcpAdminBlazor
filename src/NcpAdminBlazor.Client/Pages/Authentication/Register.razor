@page "/account/register"
@using NcpAdminBlazor.Client.Models
@layout LoginLayout

<br/>
<br/>
<br/>
@if (_showErrorAlert)
{
    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
              CloseIconClicked="@(() => CloseMe(true))">
        <span>@_errorMessage</span><br/>
    </MudAlert>
}

<MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">

    <MudText Typo="Typo.h4" GutterBottom="true">用户注册</MudText>
    <MudText>已有账户？
        <MudLink Href="@Login.PageUri">立即登录</MudLink>
    </MudText>

    <MudTextField T="string" @bind-Value="_model.Username" Required="true" RequiredError="用户名不能为空!"
                  Label="用户名" Variant="Variant.Outlined" Class="mt-4"></MudTextField>

    <MudTextField T="string" Label="密码" @bind-Value="_model.Password" Variant="Variant.Outlined" @ref="_pwField1"
                  InputType="InputType.Password" Required="true"
                  RequiredError="密码不能为空!" Class="mt-4"/>
    <MudTextField T="string"
                  Label="确认密码" Variant="Variant.Outlined" InputType="InputType.Password"
                  Validation="@(new Func<string, string>(PasswordMatch))" Class="mt-4"/>

    <MudCheckBox T="bool" @bind-Value="@AgreeToTerms" Label="I agree to the terms and privacy" Color="Color.Primary"
                 Class="ml-n1 my-3"></MudCheckBox>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success || _isBusy)"
               OnClick="@HandleSubmit" Size="Size.Large" FullWidth="true" Class="mt-4">
        @if (_isBusy)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
            <MudText Class="ms-2">注册中...</MudText>
        }
        else
        {
            <MudText>注册</MudText>
        }
    </MudButton>
</MudForm>

@code {
    [Inject] ApiClient ApiClient { get; set; } = null!;
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    private bool AgreeToTerms { get; set; }

    private bool _success;
    private bool _isBusy;
    private bool _showErrorAlert;
    private string _errorMessage = string.Empty;
    private readonly InputModel _model = new();

    string[] _errors = [];
    MudForm _form = new();

    MudTextField<string> _pwField1 = new();

    private string PasswordMatch(string arg)
    {
        return _pwField1.Value != arg ? "两次密码输入不一致" : string.Empty;
    }

    async Task HandleSubmit()
    {
        _isBusy = true;
        _showErrorAlert = false;

        try
        {
            await _form.Validate();

            if (!_form.IsValid)
            {
                _isBusy = false;
                return;
            }

            var result = await ApiClient.Api.User.Create.PostAsync(new NcpAdminBlazorWebEndpointsUsersRegisterUserRequest
            {
                Username = _model.Username,
                Password = _model.Password
            });

            if (result is { Success: true })
            {
                NavigationManager.NavigateTo(Login.PageUri);
            }
            else
            {
                _showErrorAlert = true;
                _errorMessage = result?.Message ?? "注册失败，请稍后重试";
            }
        }
        catch (Exception)
        {
            _showErrorAlert = true;
            _errorMessage = "注册过程中发生错误，请重试";
        }
        finally
        {
            _isBusy = false;
        }
    }

    private void CloseMe(bool value)
    {
        if (!value) return;
        _showErrorAlert = false;
    }

    class InputModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

}

