@page "/account/login"
@layout LoginLayout
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using NcpAdminBlazor.Client.Client.Apis
@using NcpAdminBlazor.Client.Client.Layout
@using NcpAdminBlazor.Client.Client.Providers
@using NcpAdminBlazor.Shared.EndpointsDtos.UserEndpoints

@if (_showErrorAlert)
{
    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))" >@_errorMessage</MudAlert>
}

<MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="mt-4">Sign In</MudText>

    <MudText>Don't have an account? <MudLink Href="/pages/authentication/register">Sign Up</MudLink></MudText>

    <MudTextField T="string" @bind-Value="@_model.LoginName" Required="true" Label="用户名/邮箱/手机号" Variant="Variant.Outlined" Class="my-6"></MudTextField>

    <MudTextField @bind-Value="@_model.Password" Label="密码" Required="true" Variant="Variant.Outlined" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

    <div Class="d-flex justify-space-between align-center">
        <MudCheckBox T="bool" Label="记住我" @bind-Checked="_rememberMe" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
        <MudSpacer />
        <br />
        <br />
        <MudLink Href="/pages/authentication/forgot-password">忘记密码?</MudLink>
    </div>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success || _isBusy)" Size="Size.Large" FullWidth="true" OnClick="HandleSubmit">
        @if (_isBusy)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
            <MudText Class="ms-2">登录中...</MudText>
        }
        else
        {
            <MudText>登录</MudText>
        }
    </MudButton>

    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="_isBusy" Size="Size.Large" FullWidth="true" OnClick="HandleGuest" Class="mt-4">游客登录</MudButton>

</MudForm>


@code {
    [Inject] IUserApi UserApi { get; set; } = null!;
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    [Inject] ILocalStorageService LocalStorage { get; set; } = null!;
    [Inject] AuthenticationStateProvider AuthStateProvider { get; set; } = null!;
    private bool _showErrorAlert;
    private string _errorMessage = string.Empty;
    private const string PageUrl = "/account/login";
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    private bool _isBusy;
    private readonly LoginRequest _model = new();
    private bool _rememberMe;
    private bool _success;
    private string[] _errors = [];
    private MudForm _form = new();

    bool _passwordVisibility;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task HandleSubmit()
    {
        if (_isBusy) return;
        
        _isBusy = true;
        _showErrorAlert = false;
        StateHasChanged();

        try
        {
            var result = await UserApi.LoginAsync(_model);
            if (result.Success)
            {
                // 通知认证状态更改
                await (AuthStateProvider as TokenAuthenticationStateProvider 
                       ?? throw new InvalidOperationException("Authentication provider is not properly configured"))
                    .Login(result.Data.Token);    
                
                NavigationManager.NavigateTo("/personal/dashboard");
            }
            else
            {
                _errorMessage = result.Message;
                _showErrorAlert = true;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _showErrorAlert = true;
        }
        finally
        {
            _isBusy = false;
            StateHasChanged();
        }
    }

    private async Task HandleGuest()
    {
        if (_isBusy) return;
        
        _isBusy = true;
        _showErrorAlert = false;
        StateHasChanged();

        var guestModel = new LoginRequest
        {
            LoginName = "guest@example.com",
            Password = "123456"
        };

        try
        {
            var result = await UserApi.LoginAsync(guestModel);
            if (result.Success)
            {
                NavigationManager.NavigateTo("/personal/dashboard");
            }
            else
            {
                _errorMessage = result.Message;
                _showErrorAlert = true;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _showErrorAlert = true;
        }
        finally
        {
            _isBusy = false;
            StateHasChanged();
        }
    }

    void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private void CloseMe(bool value)
    {
        if (value)
        {
            _showErrorAlert = false;
        }
    }
    
    
}
