// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace NcpAdminBlazor.Client.Models
{
    /// <summary>
    /// 分页数据模型
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class NetCorePalExtensionsDtoPagedDataOfUserListItemDto : IParsable
    {
        /// <summary>分页数据</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NcpAdminBlazor.Client.Models.NcpAdminBlazorWebApplicationQueriesUserListItemDto>? Items { get; set; }
#nullable restore
#else
        public List<global::NcpAdminBlazor.Client.Models.NcpAdminBlazorWebApplicationQueriesUserListItemDto> Items { get; set; }
#endif
        /// <summary>当前页码，从1开始</summary>
        public int? PageIndex { get; set; }
        /// <summary>每页数据条数</summary>
        public int? PageSize { get; set; }
        /// <summary>数据总数</summary>
        public int? Total { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::NcpAdminBlazor.Client.Models.NetCorePalExtensionsDtoPagedDataOfUserListItemDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::NcpAdminBlazor.Client.Models.NetCorePalExtensionsDtoPagedDataOfUserListItemDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::NcpAdminBlazor.Client.Models.NetCorePalExtensionsDtoPagedDataOfUserListItemDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "items", n => { Items = n.GetCollectionOfObjectValues<global::NcpAdminBlazor.Client.Models.NcpAdminBlazorWebApplicationQueriesUserListItemDto>(global::NcpAdminBlazor.Client.Models.NcpAdminBlazorWebApplicationQueriesUserListItemDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "pageIndex", n => { PageIndex = n.GetIntValue(); } },
                { "pageSize", n => { PageSize = n.GetIntValue(); } },
                { "total", n => { Total = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::NcpAdminBlazor.Client.Models.NcpAdminBlazorWebApplicationQueriesUserListItemDto>("items", Items);
            writer.WriteIntValue("pageIndex", PageIndex);
            writer.WriteIntValue("pageSize", PageSize);
            writer.WriteIntValue("total", Total);
        }
    }
}
#pragma warning restore CS0618
