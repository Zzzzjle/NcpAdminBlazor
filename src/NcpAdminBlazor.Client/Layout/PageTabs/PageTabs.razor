@using NcpAdminBlazor.Client.Providers
@using NcpAdminBlazor.Client.Models
@implements IDisposable
@inject NavigationManager NavigationManager
@inject MenuProvider MenuProvider

@namespace NcpAdminBlazor.Client.Layout

<!--suppress CssUnresolvedCustomProperty -->
<div
    class="pl-2 w-full flex items-center border-b border-[var(--mud-palette-lines-default)] bg-[var(--mud-palette-appbar-background)]">
    <div class="flex my-0.5 h-10 items-center gap-1">
        @for (var index = 0; index < _pageTabs.Count; index++)
        {
            var item = _pageTabs[index];
            <MudButton
                Class="shrink-0"
                StartIcon="@item.Icon"
                Color="@(_activeRoute == item.Route ? Color.Primary : Color.Default)"
                Style="@(_activeRoute == item.Route ? "background-color: var(--mud-palette-primary-hover)" : "")"
                OnClick="@(() => OnClicked(item))"
                Ripple="false">
                @item.Title
                @if (item.IsCloseable)
                {
                    <span
                        class="ml-2 -mr-1 inline-flex h-5 w-5 items-center justify-center rounded-full text-sm text-gray-500 transition-colors hover:bg-gray-200 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-gray-300"
                        role="button"
                        title="Close tab"
                        aria-label="Close tab"
                        @onclick="_ => OnClosed(item)"
                        @onclick:preventDefault
                        @onclick:stopPropagation>&times;</span>
                }
            </MudButton>
            @if (index < _pageTabs.Count - 1)
            {
                <MudDivider Vertical="true" Class="h-1/2"/>
            }
        }
    </div>
    <MudButtonGroup Color="Color.Inherit" Variant="Variant.Text" Class="ml-auto">
        <MudMenu Dense Icon="@Icons.Material.Filled.KeyboardArrowDown">
            <ChildContent>
                <MudMenuItem Label="刷新" Icon="@Icons.Material.Filled.Autorenew"/>
                <MudMenuItem Label="固定" Icon="@Icons.Material.Filled.PushPin"/>
                <MudMenuItem Label="在新窗口打开" Icon="@Icons.Material.Filled.OpenInNew"></MudMenuItem>
                <MudDivider/>
                <MudMenuItem Label="关闭左侧标签页" Icon="@Icons.Material.Filled.ArrowBack"/>
                <MudMenuItem Label="关闭右侧标签页" Icon="@Icons.Material.Filled.ArrowForward"/>
                <MudDivider/>
                <MudMenuItem Label="关闭其他标签页" Icon="@Icons.Material.Filled.CompareArrows"/>
                <MudMenuItem Label="关闭全部标签页" Icon="@Icons.Material.Filled.Close"></MudMenuItem>
            </ChildContent>
        </MudMenu>
        <MudIconButton Icon="@Icons.Material.Filled.Fullscreen"></MudIconButton>
    </MudButtonGroup>
</div>

@code {

    /// <summary>
    /// 定义一个公共事件，当标签页关闭时触发。
    /// 其他持有本组件引用的组件可以订阅此事件。
    /// </summary>
    public event Action<string>? OnTabClosed;

    private readonly List<PageTabItem> _pageTabs = [];

    private string? _activeRoute;


    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        HandleLocationChange(NavigationManager.Uri);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        HandleLocationChange(e.Location);
        InvokeAsync(StateHasChanged);
    }

    private string GetCurrentRoute(string location)
    {
        return $"/{NavigationManager.ToBaseRelativePath(location)}";
    }

    private void HandleLocationChange(string newLocation)
    {
        var currentRoute = GetCurrentRoute(newLocation);
        _activeRoute = currentRoute;

        if (_pageTabs.Any(c => c.Route == currentRoute)) return;
        var menuItem = FindMenuItemByHref(MenuProvider.MenuItems, currentRoute);
        var title = menuItem?.Title ?? GenerateFallbackTitle(currentRoute);
        var icon = menuItem?.Icon ?? string.Empty;
        _pageTabs.Add(new PageTabItem(currentRoute, title, icon, currentRoute != "/"));
    }

    private void OnClicked(PageTabItem page)
    {
        if (_activeRoute != page.Route)
        {
            NavigationManager.NavigateTo(page.Route);
        }
    }

    private void OnClosed(PageTabItem pageTabItem)
    {
        _pageTabs.Remove(pageTabItem);

        if (_activeRoute == pageTabItem.Route && _pageTabs.Count > 0)
        {
            NavigationManager.NavigateTo(_pageTabs[^1].Route);
        }

        OnTabClosed?.Invoke(pageTabItem.Route);
    }

    // 从 MenuProvider 查找菜单项的核心逻辑
    private static MenuItem? FindMenuItemByHref(IEnumerable<MenuItem> items, string href)
    {
        MenuItem? bestMatch = null;
        foreach (var item in items)
        {
            if (item.Href != null && href.StartsWith(item.Href, StringComparison.OrdinalIgnoreCase) &&
                (bestMatch == null || item.Href.Length > bestMatch.Href!.Length))
            {
                bestMatch = item;
            }

            if (item.ChildItems is null || item.ChildItems.Count == 0) continue;
            var childMatch = FindMenuItemByHref(item.ChildItems, href);
            if (childMatch != null && (bestMatch == null || childMatch.Href!.Length > bestMatch.Href!.Length))
            {
                bestMatch = childMatch;
            }
        }

        return bestMatch;
    }

    // 当无法从菜单中找到标题时的备用方法
    private static string GenerateFallbackTitle(string route)
    {
        var lastSegment = route.Split('/').LastOrDefault(s => !string.IsNullOrEmpty(s));
        // 将 "PageName" 转换为 "Page Name"
        return System.Text.RegularExpressions.Regex.Replace(lastSegment ?? "Page", "([A-Z])", " $1").Trim();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    // 数据模型 (建议将其移至一个共享的 Models 文件夹)
    private sealed record PageTabItem(
        string Route,
        string Title,
        string Icon,
        bool IsCloseable
    );

}
