@using NcpAdminBlazor.Client.Pages.Authentication
@using NcpAdminBlazor.Client.Providers
@using NcpAdminBlazor.Client.Stores

@layout MainLayout
@inherits LayoutComponentBase
@implements IDisposable

<MudLayout>
    <MudAppBar Dense Elevation="0" Gutters="false" Class="pr-3 border-b app-border-default">
        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit"
                       OnClick="@DrawerToggle"/>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudBreadcrumbs Class="py-3 px-1" Items="_breadcrumbItems"></MudBreadcrumbs>
        </MudHidden>
        <MudSpacer/>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit"
                       OnClick="@DarkModeToggle"/>
        <MudMenu Icon="@Icons.Material.Outlined.Translate" Color="Color.Inherit" Dense="true">
            <MudMenuItem>English</MudMenuItem>
            <MudMenuItem>Swedish</MudMenuItem>
            <MudMenuItem>Old Norse</MudMenuItem>
        </MudMenu>
        <MudMenu Icon="@Icons.Material.Outlined.Widgets" Color="Color.Inherit" Dense="true">
            <MudMenuItem Href="https://mudblazor.com/">MudBlazor</MudMenuItem>
            <MudMenuItem Href="https://github.com/Garderoben/MudBlazor.Templates">Source Code
            </MudMenuItem>
        </MudMenu>
        <MudMenu Class="ml-4">
            <ActivatorContent>
                <MudAvatar Size="Size.Small"/>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Icon="@Icons.Material.Outlined.Person"
                             Href="/personal/account">
                    Account
                </MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Outlined.Logout"
                             OnClick="@Logout">
                    Logout
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="0" Class="border-r app-border-default">
        <MudDrawerHeader>
            <NavLink ActiveClass="d-flex align-center me-4" href="/">
                <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" Class="mr-2"/>
                <MudText Typo="Typo.h5">Application</MudText>
            </NavLink>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <PageTabs @ref="_pageTabs"></PageTabs>
        </MudHidden>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4 overflow-auto">
            <PageContainer PageTabs="_pageTabs">
                @Body
            </PageContainer>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter] private RouteData? RouteData { get; set; }
    [Inject] TokenAuthenticationStateProvider AuthStateProvider { get; set; } = null!;
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    [Inject] BreadcrumbStore BreadcrumbStore { get; set; } = null!;
    [Inject] LayoutStore LayoutStore { get; set; } = null!;
    private PageTabs _pageTabs = null!;
    private bool _drawerOpen = true;
    private List<BreadcrumbItem> _breadcrumbItems = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        BreadcrumbStore.OnBreadcrumbsChanged += UpdateBreadcrumbs;
        _breadcrumbItems = BreadcrumbStore.CurrentItems.ToList();
    }

    private void UpdateBreadcrumbs(List<BreadcrumbItem> items)
    {
        _breadcrumbItems = items;
        StateHasChanged();
    }

    public void Dispose()
    {
        BreadcrumbStore.OnBreadcrumbsChanged -= UpdateBreadcrumbs;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        LayoutStore.IsDarkMode = !LayoutStore.IsDarkMode;
    }

    private string DarkLightModeButtonIcon => LayoutStore.IsDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    async Task Logout()
    {
        await AuthStateProvider.LogoutAsync();
        NavigationManager.NavigateTo(Login.PageUri);
    }

}